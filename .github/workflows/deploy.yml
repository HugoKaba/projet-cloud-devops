name: Deploy Applications to AWS (Production)

on:
  pull_request:
    branches: [main]
    types: [closed]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  FRONTEND_REPO: iim-project-frontend
  BACKEND_REPO: iim-project-backend

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - run: terraform init -backend-config=prod.s3.tfbackend

      - run: terraform fmt -check

      - run: terraform plan -input=false -out=tfplan

      - if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan

  test-build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Run Backend Tests
        run: |
          cd backend
          npm ci
          npm test

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm ci
          npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Backend image
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$BACKEND_REPO:latest .
          docker tag $ECR_REGISTRY/$BACKEND_REPO:latest $ECR_REGISTRY/$BACKEND_REPO:$GITHUB_SHA
          docker push $ECR_REGISTRY/$BACKEND_REPO:latest
          docker push $ECR_REGISTRY/$BACKEND_REPO:$GITHUB_SHA

      - name: Build and push Frontend image
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$FRONTEND_REPO:latest .
          docker tag $ECR_REGISTRY/$FRONTEND_REPO:latest $ECR_REGISTRY/$FRONTEND_REPO:$GITHUB_SHA
          docker push $ECR_REGISTRY/$FRONTEND_REPO:latest
          docker push $ECR_REGISTRY/$FRONTEND_REPO:$GITHUB_SHA

      - name: Terraform Init (output)
        run: terraform init -backend-config=prod.s3.tfbackend
        working-directory: terraform

      - name: Deploy to EC2 via AWS SSM
        run: |
          cd terraform
          INSTANCE_ID=$(terraform output -raw instance_id)
          INSTANCE_IP=$(terraform output -raw instance_ip)

          if [ "$INSTANCE_ID" == "null" ] || [ "$INSTANCE_ID" == "" ]; then
            exit 1
          fi

          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          for i in {1..20}; do
            SSM_STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
              --query "InstanceInformationList[0].PingStatus" \
              --output text 2>/dev/null || echo "null")
            
            if [ "$SSM_STATUS" = "Online" ]; then
              break
            fi
            
            sleep 15
          done

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}',
              'docker pull ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_REPO }}:latest || exit 1',
              'docker pull ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_REPO }}:latest || exit 1',
              'docker network create app-network 2>/dev/null || true',
              'docker stop backend-app frontend-app 2>/dev/null || true',
              'docker rm backend-app frontend-app 2>/dev/null || true',
              'docker run -d --name backend-app \
                --restart unless-stopped \
                --network app-network \
                -p 3001:3001 \
                -e AWS_REGION=eu-west-1 \
                -e NODE_ENV=production \
                -e DYNAMODB_TABLE_NAME=iim-project-data \
                -e PORT=3001 \
                ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_REPO }}:latest',
              'docker run -d --name frontend-app \
                --restart unless-stopped \
                --network app-network \
                -p 80:80 \
                -e BACKEND_HOST=$INSTANCE_IP \
                -e BACKEND_PORT=3001 \
                ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_REPO }}:latest',
              'sleep 25',
              'docker ps -a --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"',
              'curl -f http://localhost:3001/api/health -m 15 || true',
              'curl -f http://localhost -m 15 -o /dev/null -s || true'
            ]" \
            --timeout-seconds 900 \
            --query "Command.CommandId" \
            --output text)

          sleep 60

          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "Status" \
            --output text)

          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "StandardOutputContent" \
            --output text

          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "StandardErrorContent" \
            --output text)

          if [ "$ERROR_OUTPUT" != "" ] && [ "$ERROR_OUTPUT" != "None" ]; then
            echo "$ERROR_OUTPUT"
          fi

          if [ "$STATUS" != "Success" ]; then
            exit 1
          fi

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='IIM-Project-CloudFront'].Id" \
            --output text \
            --region us-east-1)

          if [ "$DISTRIBUTION_ID" != "" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*" \
              --query "Invalidation.Id" \
              --output text \
              --region us-east-1)
            
            aws cloudfront wait invalidation-completed \
              --distribution-id $DISTRIBUTION_ID \
              --id $INVALIDATION_ID \
              --region us-east-1
          fi

      - name: Performance Testing
        run: |
          cd terraform
          INSTANCE_IP=$(terraform output -raw instance_ip)

          DIRECT_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' http://$INSTANCE_IP/api/health || echo "timeout")

          sleep 30

          CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='IIM-Project-CloudFront'].DomainName" \
            --output text \
            --region us-east-1)

          if [ "$CLOUDFRONT_DOMAIN" != "" ]; then
            CLOUDFRONT_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' https://$CLOUDFRONT_DOMAIN/api/health || echo "timeout")
          fi

      - name: Post-Test Validation
        run: |
          cd terraform
          INSTANCE_IP=$(terraform output -raw instance_ip)

          API_RESPONSE=$(curl -s http://$INSTANCE_IP/api/health | jq -r '.status' 2>/dev/null || echo "ERROR")

          CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='IIM-Project-CloudFront'].DomainName" \
            --output text \
            --region us-east-1)

          if [ "$CLOUDFRONT_DOMAIN" != "" ]; then
            CF_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://$CLOUDFRONT_DOMAIN/api/health)
          fi

      - name: Final validation
        run: |
          cd terraform
          INSTANCE_IP=$(terraform output -raw instance_ip)

          sleep 15

          curl -f http://$INSTANCE_IP/api/health -m 30 -s || true
          curl -f http://$INSTANCE_IP -m 30 -o /dev/null -s || true
