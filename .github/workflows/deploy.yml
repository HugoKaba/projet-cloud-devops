name: Deploy Applications to AWS (Production)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
  FRONTEND_REPO: iim-project-frontend
  BACKEND_REPO: iim-project-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Backend image
        run: |
          cd backend
          echo "Building backend image..."
          docker build -t $ECR_REGISTRY/$BACKEND_REPO:latest .
          docker tag $ECR_REGISTRY/$BACKEND_REPO:latest $ECR_REGISTRY/$BACKEND_REPO:$GITHUB_SHA
          echo "Pushing backend image to ECR..."
          docker push $ECR_REGISTRY/$BACKEND_REPO:latest
          docker push $ECR_REGISTRY/$BACKEND_REPO:$GITHUB_SHA
          echo "‚úÖ Backend image pushed successfully"

      - name: Build and push Frontend image
        run: |
          cd frontend
          echo "Building frontend image..."
          docker build -t $ECR_REGISTRY/$FRONTEND_REPO:latest .
          docker tag $ECR_REGISTRY/$FRONTEND_REPO:latest $ECR_REGISTRY/$FRONTEND_REPO:$GITHUB_SHA
          echo "Pushing frontend image to ECR..."
          docker push $ECR_REGISTRY/$FRONTEND_REPO:latest
          docker push $ECR_REGISTRY/$FRONTEND_REPO:$GITHUB_SHA
          echo "‚úÖ Frontend image pushed successfully"

      - name: Deploy to EC2 via AWS SSM
        run: |
          echo "üöÄ Starting deployment process..."
          
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ secrets.EC2_HOST }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          if [ "$INSTANCE_ID" == "null" ] || [ "$INSTANCE_ID" == "" ]; then
            echo "‚ùå Error: Could not find EC2 instance with IP ${{ secrets.EC2_HOST }}"
            exit 1
          fi
          
          echo "üì° Deploying to instance: $INSTANCE_ID"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"=== üöÄ Starting deployment at $(date) ===\"",
              "echo \"üîê Logging into ECR...\"",
              "aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}",
              "echo \"üì• Pulling latest images...\"",
              "docker pull ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_REPO }}:latest || { echo \"‚ùå Failed to pull backend image\"; exit 1; }",
              "docker pull ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_REPO }}:latest || { echo \"‚ùå Failed to pull frontend image\"; exit 1; }",
              "echo \"üîó Setting up Docker network...\"",
              "docker network create app-network 2>/dev/null || echo \"Network app-network already exists\"",
              "echo \"üõë Stopping existing containers...\"",
              "docker stop backend-app frontend-app 2>/dev/null || echo \"No containers to stop\"",
              "docker rm backend-app frontend-app 2>/dev/null || echo \"No containers to remove\"",
              "echo \"üü¢ Starting new backend container...\"",
              "docker run -d --name backend-app \
                --restart unless-stopped \
                --network app-network \
                -p 3001:3001 \
                -e AWS_REGION=eu-west-1 \
                -e NODE_ENV=production \
                -e DYNAMODB_TABLE_NAME=iim-project-data \
                -e PORT=3001 \
                ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_REPO }}:latest",
              "echo \"üü¶ Starting new frontend container...\"", 
              "docker run -d --name frontend-app \
                --restart unless-stopped \
                --network app-network \
                -p 80:80 \
                -e BACKEND_HOST=${{ secrets.BACKEND_HOST }} \
                -e BACKEND_PORT=${{ secrets.BACKEND_PORT }} \
                ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_REPO }}:latest",
              "echo \"‚è≥ Waiting for containers to start...\"",
              "sleep 25",
              "echo \"=== üìä Container Status ===\"",
              "docker ps -a --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"",
              "echo \"=== ü©∫ Health Checks ===\"",
              "echo \"Backend health check...\"",
              "curl -f http://localhost:3001/api/health -m 15 || echo \"‚ö†Ô∏è Backend health check failed\"",
              "echo \"Frontend connectivity check...\"",
              "curl -f http://localhost -m 15 -o /dev/null -s && echo \"‚úÖ Frontend accessible\" || echo \"‚ö†Ô∏è Frontend not ready yet\"",
              "echo \"=== ‚úÖ Deployment completed successfully at $(date) ===\""
            ]' \
            --timeout-seconds 900 \
            --query "Command.CommandId" \
            --output text)
          
          echo "üìã Command ID: $COMMAND_ID"
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 60
          
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "Status" \
            --output text)
          
          echo "üìà Deployment status: $STATUS"
          
          echo "=== üìã Deployment Output ==="
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "StandardOutputContent" \
            --output text
          
          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "StandardErrorContent" \
            --output text)
          
          if [ "$ERROR_OUTPUT" != "" ] && [ "$ERROR_OUTPUT" != "None" ]; then
            echo "=== ‚ö†Ô∏è Deployment Errors ==="
            echo "$ERROR_OUTPUT"
          fi
          
          if [ "$STATUS" != "Success" ]; then
            echo "‚ùå Deployment failed with status: $STATUS"
            exit 1
          fi
          
          echo "üéâ Deployment completed successfully!"

      - name: Invalidate CloudFront Cache
        run: |
          echo "üîÑ Invalidating CloudFront cache..."
          
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='IIM-Project-CloudFront'].Id" \
            --output text \
            --region us-east-1)
          
          if [ "$DISTRIBUTION_ID" != "" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            echo "üì° CloudFront Distribution ID: $DISTRIBUTION_ID"
            
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*" \
              --query "Invalidation.Id" \
              --output text \
              --region us-east-1)
            
            echo "üîÑ Invalidation cr√©√©e avec l'ID: $INVALIDATION_ID"
            echo "‚è≥ Attente de la propagation CloudFront (2-3 minutes)..."
            
            aws cloudfront wait invalidation-completed \
              --distribution-id $DISTRIBUTION_ID \
              --id $INVALIDATION_ID \
              --region us-east-1
            
            echo "‚úÖ Cache CloudFront invalid√© avec succ√®s!"
            echo "üåê Votre application est maintenant accessible via CloudFront:"
            echo "   - URL CloudFront: https://$DISTRIBUTION_ID.cloudfront.net"
            echo "   - Performance globale optimis√©e !"
          else
            echo "‚ö†Ô∏è Distribution CloudFront non trouv√©e, invalidation ignor√©e"
          fi

      - name: Performance Testing
        run: |
          echo "üìä Test de performance CloudFront vs Direct..."
          
          echo "üîó Test acc√®s direct EC2..."
          DIRECT_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' http://${{ secrets.EC2_HOST }}/api/health || echo "timeout")
          
          sleep 30
          
          echo "‚òÅÔ∏è Test acc√®s CloudFront..."
          CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='IIM-Project-CloudFront'].DomainName" \
            --output text \
            --region us-east-1)
          
          if [ "$CLOUDFRONT_DOMAIN" != "" ]; then
            CLOUDFRONT_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' https://$CLOUDFRONT_DOMAIN/api/health || echo "timeout")
            
            echo "üìà R√©sultats des tests de performance:"
            echo "   üñ•Ô∏è Acc√®s direct EC2: ${DIRECT_TIME}s"
            echo "   ‚òÅÔ∏è Acc√®s CloudFront: ${CLOUDFRONT_TIME}s"
            echo "   üåê Domaine CloudFront: https://$CLOUDFRONT_DOMAIN"
          fi

      - name: Final validation
        run: |
          echo "üîç Performing final validation..."
          
          sleep 15
          
          echo "üåê Testing application connectivity..."
          if curl -f http://${{ secrets.EC2_HOST }}/api/health -m 30 -s; then
            echo "‚úÖ Backend API is responding"
          else
            echo "‚ö†Ô∏è Backend API may not be ready yet"
          fi
          
          if curl -f http://${{ secrets.EC2_HOST }} -m 30 -o /dev/null -s; then
            echo "‚úÖ Frontend is accessible"
          else
            echo "‚ö†Ô∏è Frontend may not be ready yet"
          fi
          
          echo ""
          echo "üéä ==========================="
          echo "üéâ DEPLOYMENT SUCCESSFUL! üéâ"
          echo "üéä ==========================="
          echo ""
          echo "üîó Application URLs:"
          echo "   üì± Frontend: http://${{ secrets.EC2_HOST }}"
          echo "   üîå API Health: http://${{ secrets.EC2_HOST }}/api/health"
          echo "   üìä Metrics: http://${{ secrets.EC2_HOST }}/api/metrics"
          echo ""
          echo "üõ†Ô∏è Management URLs:"
          echo "   üìä CloudWatch: https://console.aws.amazon.com/cloudwatch/"
          echo "   üíæ DynamoDB: https://console.aws.amazon.com/dynamodb/"
          echo "   üê≥ ECR: https://console.aws.amazon.com/ecr/"
          echo ""
          echo "‚ö° Quick tests:"
          echo "   curl http://${{ secrets.EC2_HOST }}/api/health"
          echo "   curl -X POST http://${{ secrets.EC2_HOST }}/api/todos -H 'Content-Type: application/json' -d '{\"text\":\"Test task\"}'"
